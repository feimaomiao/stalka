// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package dbtypes

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const gameExist = `-- name: GameExist :one
SELECT COUNT(*) FROM games WHERE id = $1
`

func (q *Queries) GameExist(ctx context.Context, id int32) (int64, error) {
	row := q.db.QueryRow(ctx, gameExist, id)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const insertToGames = `-- name: InsertToGames :exec
INSERT INTO games (id, name, slug) VALUES ($1, $2, $3) ON CONFLICT (id) DO UPDATE SET
    name = EXCLUDED.name,
    slug = EXCLUDED.slug
`

type InsertToGamesParams struct {
	ID   int32
	Name string
	Slug pgtype.Text
}

func (q *Queries) InsertToGames(ctx context.Context, arg InsertToGamesParams) error {
	_, err := q.db.Exec(ctx, insertToGames, arg.ID, arg.Name, arg.Slug)
	return err
}

const insertToLeagues = `-- name: InsertToLeagues :exec
INSERT INTO leagues (id, name, slug, image_link, game_id) VALUES ($1, $2, $3, $4, $5) ON CONFLICT (id) DO UPDATE SET
    name = EXCLUDED.name,
    slug = EXCLUDED.slug,
    image_link = EXCLUDED.image_link,
    game_id = EXCLUDED.game_id
`

type InsertToLeaguesParams struct {
	ID        int32
	Name      string
	Slug      pgtype.Text
	ImageLink pgtype.Text
	GameID    int32
}

func (q *Queries) InsertToLeagues(ctx context.Context, arg InsertToLeaguesParams) error {
	_, err := q.db.Exec(ctx, insertToLeagues,
		arg.ID,
		arg.Name,
		arg.Slug,
		arg.ImageLink,
		arg.GameID,
	)
	return err
}

const insertToMatches = `-- name: InsertToMatches :exec
INSERT INTO matches (id, name, slug, finished, expected_start_time, actual_game_time, team1_id, team1_score, team2_id, team2_score, amount_of_games, game_id, league_id, series_id, tournament_id) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15) ON CONFLICT (id) DO UPDATE SET
    name = EXCLUDED.name,
    slug = EXCLUDED.slug,
    finished = EXCLUDED.finished,
    expected_start_time = EXCLUDED.expected_start_time,
    actual_game_time = EXCLUDED.actual_game_time,
    team1_id = EXCLUDED.team1_id,
    team1_score = EXCLUDED.team1_score,
    team2_id = EXCLUDED.team2_id,
    team2_score = EXCLUDED.team2_score,
    amount_of_games = EXCLUDED.amount_of_games,
    game_id = EXCLUDED.game_id,
    league_id = EXCLUDED.league_id,
    series_id = EXCLUDED.series_id,
    tournament_id = EXCLUDED.tournament_id
`

type InsertToMatchesParams struct {
	ID                int32
	Name              string
	Slug              pgtype.Text
	Finished          bool
	ExpectedStartTime pgtype.Timestamp
	ActualGameTime    float64
	Team1ID           int32
	Team1Score        int32
	Team2ID           int32
	Team2Score        int32
	AmountOfGames     int32
	GameID            int32
	LeagueID          int32
	SeriesID          int32
	TournamentID      int32
}

func (q *Queries) InsertToMatches(ctx context.Context, arg InsertToMatchesParams) error {
	_, err := q.db.Exec(ctx, insertToMatches,
		arg.ID,
		arg.Name,
		arg.Slug,
		arg.Finished,
		arg.ExpectedStartTime,
		arg.ActualGameTime,
		arg.Team1ID,
		arg.Team1Score,
		arg.Team2ID,
		arg.Team2Score,
		arg.AmountOfGames,
		arg.GameID,
		arg.LeagueID,
		arg.SeriesID,
		arg.TournamentID,
	)
	return err
}

const insertToSeries = `-- name: InsertToSeries :exec
INSERT INTO series (id, name, slug, game_id, league_id) VALUES ($1, $2, $3, $4, $5) ON CONFLICT (id) DO UPDATE SET
    name = EXCLUDED.name,
    slug = EXCLUDED.slug,
    game_id = EXCLUDED.game_id,
    league_id = EXCLUDED.league_id
`

type InsertToSeriesParams struct {
	ID       int32
	Name     string
	Slug     pgtype.Text
	GameID   int32
	LeagueID int32
}

func (q *Queries) InsertToSeries(ctx context.Context, arg InsertToSeriesParams) error {
	_, err := q.db.Exec(ctx, insertToSeries,
		arg.ID,
		arg.Name,
		arg.Slug,
		arg.GameID,
		arg.LeagueID,
	)
	return err
}

const insertToTeams = `-- name: InsertToTeams :exec
INSERT INTO teams (id, name, slug, acronym, image_link, game_id) VALUES ($1, $2, $3, $4, $5, $6) ON CONFLICT (id) DO UPDATE SET
    name = EXCLUDED.name,
    slug = EXCLUDED.slug,
    acronym = EXCLUDED.acronym,
    image_link = EXCLUDED.image_link,
    game_id = EXCLUDED.game_id
`

type InsertToTeamsParams struct {
	ID        int32
	Name      string
	Slug      pgtype.Text
	Acronym   pgtype.Text
	ImageLink pgtype.Text
	GameID    int32
}

func (q *Queries) InsertToTeams(ctx context.Context, arg InsertToTeamsParams) error {
	_, err := q.db.Exec(ctx, insertToTeams,
		arg.ID,
		arg.Name,
		arg.Slug,
		arg.Acronym,
		arg.ImageLink,
		arg.GameID,
	)
	return err
}

const insertToTournaments = `-- name: InsertToTournaments :exec
INSERT INTO tournaments (id,name, slug,tier, game_id, serie_id, league_id) VALUES ($1, $2, $3, $4, $5, $6, $7) ON CONFLICT (id) DO UPDATE SET
    name = EXCLUDED.name,
    slug = EXCLUDED.slug,
    tier = EXCLUDED.tier,
    game_id = EXCLUDED.game_id,
    serie_id = EXCLUDED.serie_id,
    league_id = EXCLUDED.league_id
`

type InsertToTournamentsParams struct {
	ID       int32
	Name     string
	Slug     pgtype.Text
	Tier     pgtype.Int4
	GameID   int32
	SerieID  int32
	LeagueID int32
}

func (q *Queries) InsertToTournaments(ctx context.Context, arg InsertToTournamentsParams) error {
	_, err := q.db.Exec(ctx, insertToTournaments,
		arg.ID,
		arg.Name,
		arg.Slug,
		arg.Tier,
		arg.GameID,
		arg.SerieID,
		arg.LeagueID,
	)
	return err
}

const leagueExist = `-- name: LeagueExist :one
SELECT COUNT(*) FROM leagues WHERE id = $1
`

func (q *Queries) LeagueExist(ctx context.Context, id int32) (int64, error) {
	row := q.db.QueryRow(ctx, leagueExist, id)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const matchExist = `-- name: MatchExist :one
SELECT COUNT(*) FROM matches WHERE id = $1
`

func (q *Queries) MatchExist(ctx context.Context, id int32) (int64, error) {
	row := q.db.QueryRow(ctx, matchExist, id)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const seriesExist = `-- name: SeriesExist :one
SELECT COUNT(*) FROM series WHERE id = $1
`

func (q *Queries) SeriesExist(ctx context.Context, id int32) (int64, error) {
	row := q.db.QueryRow(ctx, seriesExist, id)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const teamExist = `-- name: TeamExist :one
SELECT COUNT(*) FROM teams WHERE id = $1
`

func (q *Queries) TeamExist(ctx context.Context, id int32) (int64, error) {
	row := q.db.QueryRow(ctx, teamExist, id)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const tournamentExist = `-- name: TournamentExist :one
SELECT COUNT(*) FROM tournaments WHERE id = $1
`

func (q *Queries) TournamentExist(ctx context.Context, id int32) (int64, error) {
	row := q.db.QueryRow(ctx, tournamentExist, id)
	var count int64
	err := row.Scan(&count)
	return count, err
}
